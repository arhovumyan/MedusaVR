server {
    listen 80;
    
    # HTTPS redirect for production only (when X-Forwarded-Proto header exists)
    # This prevents redirect loops in local development
    if ($http_x_forwarded_proto = "http") {
        return 301 https://$server_name$request_uri;
    }
    
    # Disable server tokens
    server_tokens off;
    
    # Disable directory indexing
    autoindex off;
    
    # Block access to sensitive files (must come before location / block)
    location ~ /\. {
        deny all;
        return 444;
    }
    
    # Block access to common sensitive file patterns
    location ~ \.(env|git|gitignore|htaccess|htpasswd|ini|log|sh|sql|bak|backup|old|orig|save|swo|swp|tmp)$ {
        deny all;
        return 444;
    }
    
    # Block access to application configuration files
    location ~ ^/(package\.json|server\.js|docker-compose\.yml|tsconfig\.json|vite\.config\.[jt]s|\.dockerignore|Dockerfile.*|.*\.lock)$ {
        deny all;
        return 444;
    }
    
    # Block access to common development files
    location ~ ^/(\.git|\.vscode|node_modules|src|tests?|spec|\.github|\.gitlab)(/|$) {
        deny all;
        return 444;
    }
    
    # CSP violation reporting endpoint
    location /csp-report {
        access_log /var/log/nginx/csp_violations.log;
        proxy_pass http://backend:5002/api/security/csp-report;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Content-Type application/csp-report;
        
        # Only allow POST requests for CSP reports
        limit_except POST { deny all; }
    }

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        try_files $uri $uri/ /index.html;
        
        # Security headers for all content
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), speaker=(), vibrate=(), fullscreen=(self)" always;
        
        # Strict Content Security Policy with hash-based script protection
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'sha256-vKBtKt4tkKmyC3nuP9sQqJYrnGzlIk7igPLRN8vVv3E=' 'sha256-ifKTjJw/MSNzCywKVXz2VApQS4qbNmu3B5K1Ek4kb20=' 'strict-dynamic' https://apis.google.com https://www.gstatic.com https://accounts.google.com; style-src 'self' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob: https://res.cloudinary.com https://images.unsplash.com https://lh3.googleusercontent.com; connect-src 'self' wss: ws: https: https://api.cloudinary.com https://identitytoolkit.googleapis.com https://securetoken.googleapis.com https://www.googleapis.com https://www.google-analytics.com https://oauth2.googleapis.com; frame-src 'self' https://*.firebaseapp.com https://*.web.app https://accounts.google.com https://content.googleapis.com https://www.google.com; object-src 'none'; base-uri 'self'; form-action 'self' https://accounts.google.com; frame-ancestors 'none'; upgrade-insecure-requests; block-all-mixed-content; report-to csp-endpoint;" always;
        
        # Additional security headers
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "same-origin" always;
        
        # CSP Reporting endpoint
        add_header Reporting-Endpoints "csp-endpoint=\"/csp-report\"" always;
        add_header Cache-Control "public, max-age=31536000" always;
    }

    location /api/ {
        # Rate limiting for API endpoints (requires global zone definition)
        limit_req zone=api burst=20 nodelay;
        
        # Handle OPTIONS requests for CORS preflight
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
            add_header 'Access-Control-Allow-Credentials' 'true';
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        proxy_pass http://backend:5002;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Security headers for API
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none';" always;
        add_header Cross-Origin-Resource-Policy "same-origin" always;
        add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        
        # Hide backend server information
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;
    }

    # Socket.IO support
    location /socket.io/ {
        proxy_pass http://backend:5002;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific security
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
        
        # Security headers for WebSocket
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Content-Security-Policy "default-src 'none'; connect-src 'self' wss: ws:; frame-ancestors 'none';" always;
        add_header Cross-Origin-Resource-Policy "same-origin" always;
    }
    
    # Error pages - don't reveal server information
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}
