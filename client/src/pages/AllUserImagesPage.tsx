import React from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { LoadingSpinner } from '@/components/ui/loading-spinner';
import { useAuth } from '@/hooks/useAuth';
import { apiRequest } from '@/lib/queryClient';
import { Link } from 'wouter';

type PublicImage = {
  id: string;
  url: string;
  characterName: string;
  characterId?: string | number;
  username: string;
  createdAt: string;
};

export default function AllUserImagesPage(): JSX.Element {
  const { user } = useAuth();

  const { data, isLoading, error } = useQuery({
    queryKey: ['all-user-images'],
    queryFn: async () => {
      const response = await apiRequest('GET', `/api/user-gallery/all`, undefined, {}, 'medium');
      return response.json() as Promise<{
        success: boolean;
        images: PublicImage[];
        total: number;
      }>;
    },
  });

  return (
    <div className="min-h-screen bg-zinc-900 text-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-orange-400 to-orange-600 bg-clip-text text-transparent">
              All Users' Generated Images
            </h1>
            <p className="text-zinc-400 mt-1">Images generated by all users from premade characters</p>
          </div>
          <Link href="/user-gallery">
            <Button variant="outline" className="border-orange-500/40 text-orange-300 hover:bg-orange-500/10">Your gallery</Button>
          </Link>
        </div>

        {isLoading ? (
          <div className="flex items-center justify-center py-16">
            <LoadingSpinner size="lg" text="Loading images..." />
          </div>
        ) : error ? (
          <div className="text-center text-zinc-400 py-16">
            <p>Failed to load images.</p>
          </div>
        ) : data && data.images.length > 0 ? (
          <Card className="bg-gradient-to-br from-zinc-800/50 to-zinc-900/50 backdrop-blur-lg border border-orange-500/20 shadow-2xl shadow-orange-500/10">
            <CardContent className="p-6">
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-3">
                {data.images.map((img) => (
                  <a key={img.id} href={img.url} target="_blank" rel="noopener noreferrer" className="block">
                    <div className="aspect-square rounded-lg overflow-hidden border border-orange-500/20 bg-zinc-800/40">
                      <img src={img.url} alt={`${img.characterName} by ${img.username}`} className="w-full h-full object-cover" />
                    </div>
                  </a>
                ))}
              </div>
            </CardContent>
          </Card>
        ) : (
          <Card className="bg-zinc-800/50 border border-orange-500/20">
            <CardContent className="p-12 text-center">
              <div className="text-zinc-300 mb-1">No images found</div>
              <div className="text-zinc-500 text-sm">Once users generate images, they'll appear here.</div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  );
}



